<!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <title><%= title %></title>
        <link rel='stylesheet' href='/stylesheets/style.css' />
    </head>
    <body>
        <div class="flex">
            <nav class="guildSelector">
                <header class="profil">
                    <div class="avatar">
                        <div class="guildIcon">
                            <% if(user.Avatar){ %>
                                <img src="<%= user.Avatar %>">
                            <% } else { %>
                                <% let guildAcro = user.Username.split(/\s/).reduce((response,word)=> response+=word.slice(0,1),'') %>
                                <%= guildAcro %>
                            <% } %>
                        </div>
                    </div>

                    <span><%= user.Username %></span>
                    <div class="custom-select">
                        <select>
                            <option value="0">Online</option>
                            <option value="1">Idle</option>
                            <option value="2">Dnd</option>
                            <option value="3">Invisible</option>
                        </select>
                    </div>
                </header>

                <div class="slider">

                    <span class="channelCat">Channels</span>
                    <% for (const channel of channels) { %>
                        <a class="channelSelect" data-channel id="<%= channel._ID %>">
                            <svg width="24" height="24" viewBox="0 0 24 24" class="textCcon"> <path fill="currentColor" fill-rule="evenodd" clip-rule="evenodd" d="M5.88657 21C5.57547 21 5.3399 20.7189 5.39427 20.4126L6.00001 17H2.59511C2.28449 17 2.04905 16.7198 2.10259 16.4138L2.27759 15.4138C2.31946 15.1746 2.52722 15 2.77011 15H6.35001L7.41001 9H4.00511C3.69449 9 3.45905 8.71977 3.51259 8.41381L3.68759 7.41381C3.72946 7.17456 3.93722 7 4.18011 7H7.76001L8.39677 3.41262C8.43914 3.17391 8.64664 3 8.88907 3H9.87344C10.1845 3 10.4201 3.28107 10.3657 3.58738L9.76001 7H15.76L16.3968 3.41262C16.4391 3.17391 16.6466 3 16.8891 3H17.8734C18.1845 3 18.4201 3.28107 18.3657 3.58738L17.76 7H21.1649C21.4755 7 21.711 7.28023 21.6574 7.58619L21.4824 8.58619C21.4406 8.82544 21.2328 9 20.9899 9H17.41L16.35 15H19.7549C20.0655 15 20.301 15.2802 20.2474 15.5862L20.0724 16.5862C20.0306 16.8254 19.8228 17 19.5799 17H16L15.3632 20.5874C15.3209 20.8261 15.1134 21 14.8709 21H13.8866C13.5755 21 13.3399 20.7189 13.3943 20.4126L14 17H8.00001L7.36325 20.5874C7.32088 20.8261 7.11337 21 6.87094 21H5.88657ZM9.41045 9L8.35045 15H14.3504L15.4104 9H9.41045Z"> </path> </svg>
                            <span class="channelName"><%= channel.name %></span>
                        </a>
                    <% } %>

                    <span class="channelCat">Direct message</span>
                    <% for (const user of users) { %>
                        <a class="channelSelect" data-user id="<%= user._ID %>">
                            <div class="guildIcon" style="width: 10px;height: 10px;min-width: 20px;min-height: 20px;margin-right: 6px;">
                                <% if(user.Avatar){ %>
                                    <img src="<%= user.Avatar %>">
                                <% } else { %>
                                    <% let guildAcro = user.Username.split(/\s/).reduce((response,word)=> response+=word.slice(0,1),'') %>
                                    <%= guildAcro %>
                                <% } %>
                            </div>
                            <span class="channelName">
                                <%= user.Username %>
                            </span>
                        </a>
                    <% } %>

                </div>
            </nav>
            <div class="flex-row">
                <div id="test"></div>
                <div id="channel">

                </div>
                <!-- <div id="messageLog"></div>
                <div id="send">
                    <textarea id="story" id="messagebox" name="story"></textarea>
                </div> -->
            </div>

        </div>



        <script src="/socket.io/socket.io.js"></script>

        <script>

            const socket = io();

            document.addEventListener('readystatechange', async event => {

                if (event.target.readyState === "complete") {
                    const { idÂ } = document.querySelector("[data-channel]")

                    for (const channel of document.querySelectorAll("[data-channel]")) {

                        channel.addEventListener("click", async (e) => {
                            getChannel(e.currentTarget.id);
                        }, true)

                    }

                    for (const user of document.querySelectorAll("[data-user]")) {

                        user.addEventListener("click", async (e) => {
                            getUser(e.currentTarget.id);
                        }, true)

                    }

                }
            })

            socket.on('roomMessage', function(data) {

                const messageList = document.getElementById('chanMessageList');

                messageList.appendChild(createMessage(data));
                messageList.scrollTo(0, messageList.scrollHeight);
            });

            socket.on('roomPrivate', function(data) {

                const messageList = document.getElementById('chanMessageList');

                messageList.appendChild(createMessage(data));
                messageList.scrollTo(0, messageList.scrollHeight);

            });

            async function getChannel(id) {

                const channel = await fetch(`/channel/${id}`, {
                    method: 'POST',
                })
                .then(response => response.text())
                .catch(err => {
                    throw new Error(err);
                });

                document.getElementById("channel").innerHTML = channel;

                const messageList = document.getElementById('chanMessageList');
                messageList.scrollTo(0, messageList.scrollHeight);

                socket.emit( 'room', id );

                document.getElementById('formMessage').addEventListener('submit', function(e) {
                    e.preventDefault();

                    const input = document.getElementById("send");

                    console.log("input");

                    if (input.value) {
                        socket.emit('roomMessage', {
                            content : input.value,
                            room    : id
                        })
                        input.value = '';
                    }

                })

            }

            async function getUser(id) {

                const channel = await fetch(`/user/${id}`, {
                    method: 'POST',
                })
                .then(response => response.text())
                .catch(err => {
                    throw new Error(err);
                });

                document.getElementById("channel").innerHTML = channel;

                const messageList = document.getElementById('chanMessageList');
                messageList.scrollTo(0, messageList.scrollHeight);

                socket.emit( 'mpRoom', id );

                document.getElementById('formMessage').addEventListener('submit', function(e) {
                    e.preventDefault();

                    const input = document.getElementById("send");

                    console.log("input");

                    if (input.value) {
                        socket.emit('roomPrivate', {
                            content : input.value,
                            room    : id
                        })
                        input.value = '';
                    }

                })

            }


            function createMessage(data){

                const message = document.createElement('div');

                message.classList.add("message");

                const avatar = document.createElement('div');
                avatar.classList.add("guildIcon");

                if (data.user.avatar) {

                    const image = document.createElement("img");
                    image.src = data.user.Avatar;

                    avatar.appendChild(image);

                } else {

                    const accro = document.createElement("span");
                    accro.innerText = data.user.Username.split(/\s/).reduce((response,word)=> response+=word.slice(0,1),'');
                    avatar.appendChild(accro);

                }

                message.appendChild(avatar)

                const content = document.createElement("div");
                content.classList.add("content");

                const author = document.createElement("b");
                author.innerText = data.user.Username;

                content.appendChild(author)

                const timstamp = document.createElement("small");
                timstamp.innerText = (() => {

                    const date = new Date(data.timestamp);

                    return getDisplayDate(date.getFullYear(), date.getMonth(), date.getDate())

                })()

                content.appendChild(timstamp)

                const text = document.createElement("p");
                text.innerText = data.content

                content.appendChild(text)
                message.appendChild(content)

                return message;

            }

            function getDisplayDate(year, month, day) {
                today = new Date();
                today.setHours(0);
                today.setMinutes(0);
                today.setSeconds(0);
                today.setMilliseconds(0);
                compDate = new Date(year,month-1,day); // month - 1 because January == 0
                diff = today.getTime() - compDate.getTime(); // get the difference between today(at 00:00:00) and the date
                if (compDate.getTime() == today.getTime()) {
                    return "Today";
                } else if (diff <= (24 * 60 * 60 *1000)) {
                    return "Yesterday";
                } else {
                    return compDate.toDateString(); // or format it what ever way you want
                }
            }




            // const socket = io();
            // let currentChannnel;
            // let type;

            // $(async function() {

            //     const { idÂ } = $("[data-channel]").first()[0]
            //     await getChannel(id);
            //     const messages = document.getElementById('chanMessageList');
            //     messages.scrollTo(0, messages.scrollHeight);

            // })

            // // let currentChannnel;

            // //

            // // $(async function() {
            // //     if(!currentChannnel)Â {


            // //         const form      = document.getElementById('formMessage')
            // //             , input     = document.getElementById('send')
            // //             , messages  = document.getElementById('messageLog');

            // //             console.log(form);

            // //           form.addEventListener('submit', function(e) {
            // //             e.preventDefault();
            // //             if (input.value) {
            // //                 socket.emit('chat message', input.value);
            // //                 input.value = '';
            // //             }
            // //         })
            // //     }
            // // })


            // function setInput() {

            //     const form      = document.getElementById('formMessage')
            //         , input     = document.getElementById('send')
            //         , messages  = document.getElementById('chanMessageList');

            //     form.addEventListener('submit', function(e) {
            //         e.preventDefault();

            //         if (input.value) {

            //             if (type === 1) {
            //                 socket.emit('chatMessage', {content: input.value, channel: currentChannnel});
            //             } else if (type === 0) {
            //                 socket.emit('privateMessage', {content: input.value, channel: currentChannnel});
            //             }

            //             input.value = '';
            //         }
            //     })


            //  socket.on('sendMessage', function (msg) {

            //     if (msg.msg.channel === currentChannnel && type === 1) {
            //         messages.innerHTML += newMessage(msg);
            //         messages.scrollTo(0, messages.scrollHeight);
            //     }

            // });

            // socket.on('sendMP', function (user, msg) {

            //     console.log(user, msg);


            //     // if (msg.msg.channel === currentChannnel && type === 0) {
            //     //     console.log("J'ecris un truc");
            //     //     messages.innerHTML += newMessage(msg);
            //     //     messages.scrollTo(0, messages.scrollHeight);
            //     // }

            // });



            // }

            // async function getChannel(id) {

            //     await $.ajax({
            //         type: 'POST',
            //         url: `/channel/${id}`,

            //         success: (response) => {

            //             currentChannnel = id;
            //             type = 1;
            //             document.getElementById("channel").innerHTML = response;
            //             setInput();
            //             const messages = document.getElementById('chanMessageList');
            //             messages.scrollTo(0, messages.scrollHeight);
            //          }
            //     })
            // }

            // async function getMp(id) {

            //     await $.ajax({
            //         type: 'POST',
            //         url: `/user/${id}`,

            //         success: (response) => {
            //             currentChannnel = id;
            //             type = 0
            //             document.getElementById("channel").innerHTML = response;
            //             setInput();
            //             const messages = document.getElementById('chanMessageList');
            //             messages.scrollTo(0, messages.scrollHeight);
            //          }
            //     })
            // }

            // $("[data-channel]").click(function() {
            //     getChannel(this.id)
            // });

            // $("[data-user]").click(function() {
            //     getMp(this.id)
            // });



            // // console.log(document.getElementById('formMessage'));



            // //  $('#messagebox').keyup(function() {
            // //     console.log('happening');
            // //     typing = true;
            // //     $("#icon-type").removeClass();
            // //     console.log("typing typing ....");
            // //     //socket.emit('typing', 'typing...');
            // //     socket.emit('typing', {
            // //         text: name + " is typing ..."
            // //     });
            // //     clearTimeout(timeout);
            // //     timeout = setTimeout(timeoutFunction, 1000);
            // //     });



            //                 function newMessage(data) {

            //     return `
            //         <div class="message">
            //             <div class="guildIcon">
            //                 <% if(user.Avatar){ %>
            //                     <img src="<%= user.Avatar %>">
            //                 <% } else { %>
            //                     <% let guildAcro = user.Username.split(/\s/).reduce((response,word)=> response+=word.slice(0,1),'') %>
            //                     <%= guildAcro %>
            //                 <% } %>
            //             </div>
            //             <div class="content">
            //                 <b>${data.user.Username}</b>
            //                 <small>
            //                     ${
            //                         (() => {

            //                             const time = new Date(data.msg.time)

            //                             return `
            //                                 ${time.getDate()}/${time.getMonth()+1}/${time.getFullYear()}
            //                                 ${String(time.getHours()).padStart(2, '0')}:${String(time.getMinutes()).padStart(2, '0')}
            //                             `
            //                         })()

            //                     }

            //                 </small>
            //                 <p>${data.msg.content}</p>
            //             </div>
            //         </div>
            //     </div>
            //     `
            // }


        </script>
    </body>
</html>
